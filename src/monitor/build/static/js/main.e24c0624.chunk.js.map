{"version":3,"sources":["components/controller.tsx","views/harmoware.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Controller","props","actions","animatePause","depotsData","viewport","movesbase","movedData","routePaths","clickedObject","animateReverse","settime","secperhour","leading","timeBegin","timeLength","className","role","addMinutes","htmlFor","Math","floor","min","id","Harmoware","this","Container","socket","io","HarmowarePage","useState","linedata","setLinedata","setAreadata","setMovesdata","useEffect","on","data","time","Date","now","newMovesbase","movesdata","forEach","value","JSON","parse","mtype","lat","lon","color","isExist","movedata","type","push","operation","elapsedtime","position","updateMovesBase","getAgents","console","log","areas","convertJsonToArea","areaInfo","getCoordRange","ControlArea","maxLat","maxLon","minLat","minLon","getAreas","process","setViewport","longitude","latitude","width","window","screen","height","zoom","setSecPerHour","setLeading","setTrailing","mapboxApiAccessToken","layers","LineMapLayer","getWidth","x","MovesLayer","optionVisible","getRadius","iconChange","coords","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","coord","Lat","Lon","areaStr","areaJson","area","DuplicateArea","Name","Id","control_area","arg","duplicate_area","name","connectToHarmowareVis","store","createStore","getCombinedReducer","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e24c0624.chunk.js","sourcesContent":["import * as React from 'react';\nimport {\n  DepotsInput,\n  AddMinutesButton, PlayButton, PauseButton, ReverseButton, ForwardButton,\n  ElapsedTimeRange, ElapsedTimeValue, SpeedRange, SpeedValue, SimulationDateTime,\n  NavigationButton, BasedProps, ClickedObject, RoutePaths\n} from 'harmoware-vis';\n\nconst Controller: React.FC<BasedProps> = (props) => {\n  const { actions, depotsData, viewport, movesbase, movedData, routePaths, clickedObject, animatePause, animateReverse, settime, secperhour, leading, timeBegin, timeLength } = props\n  return (\n    <div className=\"harmovis_controller\">\n      <div className=\"container\">\n        <ul className=\"list-group\">\n          <li><span>コントロールパネル</span>\n            <div className=\"btn-group d-flex\" role=\"group\">\n              {animatePause ?\n                <PlayButton actions={actions} className=\"btn btn-outline-light btn-sm w-100\" /> :\n                <PauseButton actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n              }\n              {animateReverse ?\n                <ForwardButton actions={actions} className=\"btn btn-outline-light btn-sm w-100\" /> :\n                <ReverseButton actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n              }\n            </div>\n            <div className=\"btn-group d-flex\" role=\"group\">\n              <AddMinutesButton addMinutes={-5} actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n              <AddMinutesButton addMinutes={-1} actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n            </div>\n            <div className=\"btn-group d-flex\" role=\"group\">\n              <AddMinutesButton addMinutes={1} actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n              <AddMinutesButton addMinutes={5} actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n            </div>\n          </li>\n          <li>\n            再現中日時&nbsp;<SimulationDateTime settime={settime} />\n          </li>\n          <li>\n            <label htmlFor=\"ElapsedTimeRange\">経過時間<ElapsedTimeValue settime={settime} timeBegin={timeBegin} timeLength={Math.floor(timeLength)} actions={actions} />秒&nbsp;/&nbsp;全体&nbsp;{Math.floor(timeLength)}&nbsp;秒</label>\n            <ElapsedTimeRange settime={settime} timeLength={Math.floor(timeLength)} timeBegin={timeBegin} min={-leading} actions={actions} id=\"ElapsedTimeRange\" className=\"form-control-range\" />\n          </li>\n          <li>\n            <label htmlFor=\"SpeedRange\">スピード<SpeedValue secperhour={secperhour} actions={actions} />秒/時</label>\n            <SpeedRange secperhour={secperhour} actions={actions} id=\"SpeedRange\" className=\"form-control-range\" />\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Controller","\nimport React, { useEffect, useState } from 'react';\nimport { HarmoVisLayers, Container, BasedProps, BasedState, connectToHarmowareVis, MovesLayer, Movesbase, MovesbaseOperation, DepotsLayer, DepotsData, LineMapLayer, LineMapData } from 'harmoware-vis';\nimport io from \"socket.io-client\";\nimport { Controller } from '../components';\n\n\n//const MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN ? process.env.REACT_APP_MAPBOX_TOKEN : \"\";\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoicnVpaGlyYW5vIiwiYSI6ImNqdmc0bXJ0dTAzZDYzem5vMmk0ejQ0engifQ.3k045idIb4JNvawjppzqZA'\n\n\nclass Harmoware extends Container<BasedProps & BasedState> {\n    render() {\n        const { actions, depotsData, viewport, movesbase } = this.props;\n        //console.log(\"test2\", movesbase)\n        return (<HarmowarePage {...this.props} />)\n    }\n}\n\nconst socket: SocketIOClient.Socket = io();\n\ninterface AreaInfo {\n    Id: string\n    Name: string\n    ControlArea: Coord[]\n    DuplicateArea: Coord[]\n}\n\ninterface Coord {\n    Lat: number\n    Lon: number\n}\n\nconst HarmowarePage: React.FC<BasedProps & BasedState> = (props) => {\n    const { actions, depotsData, viewport, movesbase, movedData, routePaths, clickedObject } = props\n    //console.log(\"test1\", movesbase)\n    const [linedata, setLinedata] = useState<LineMapData[]>([])\n    const [areadata, setAreadata] = useState<AreaInfo[]>([])\n    const [movesdata, setMovesdata] = useState<Movesbase[]>([])\n    //const movesdata = [...movesbase]\n\n    const getAgents = (data: any) => {\n        const time = Date.now() / 1000; // set time as now. (If data have time, ..)\n        const newMovesbase: Movesbase[] = [];\n        // useEffect内では外側のstateは初期化時のままなので、set関数内で過去のstateを取得する必要がある\n        setMovesdata((movesdata) => {\n            //console.log(\"socketData: \", movesdata);\n            data.forEach((value: any) => {\n                const { mtype, id, lat, lon } = JSON.parse(\n                    value\n                );\n                let color = [0, 200, 120];\n\n                let isExist = false;\n                // operation内のelapsedtimeなどのオブジェクトは2つ以上ないと表示されないので注意\n\n                movesdata.forEach((movedata) => {\n                    //console.log(\"id, type: \", id, movedata.type)\n                    if (id === movedata.type) {\n                        //console.log(\"match\")\n                        // 存在する場合、更新\n                        newMovesbase.push({\n                            ...movedata,\n                            operation: [\n                                ...movedata.operation,\n                                {\n                                    elapsedtime: time,\n                                    position: [lon, lat, 0],\n                                    color\n                                }\n                            ]\n                        });\n                        isExist = true\n                    }\n                })\n\n                if (!isExist) {\n                    // 存在しない場合、新規作成\n                    let color = [0, 255, 0];\n                    newMovesbase.push({\n                        type: id,\n                        operation: [\n                            {\n                                elapsedtime: time,\n                                position: [lon, lat, 0],\n                                color\n                            }\n                        ]\n                    });\n                }\n\n\n            });\n            return newMovesbase\n        })\n\n        actions.updateMovesBase(newMovesbase);\n    }\n\n    const getAreas = (data: any) => {\n        console.log(\"areaInfo\", data);\n\n        const linedata: LineMapData[] = []\n        const areas = convertJsonToArea(data)\n        setAreadata(areas)\n\n        areas.forEach((areaInfo: AreaInfo) => {\n            const { maxLat, maxLon, minLat, minLon } = getCoordRange(areaInfo.ControlArea)\n            linedata.push({\n                \"sourcePosition\": [minLon, minLat, 0],\n                \"targetPosition\": [minLon, maxLat, 0]\n            })\n            linedata.push({\n                \"sourcePosition\": [minLon, maxLat, 0],\n                \"targetPosition\": [maxLon, maxLat, 0]\n            })\n            linedata.push({\n                \"sourcePosition\": [maxLon, maxLat, 0],\n                \"targetPosition\": [maxLon, minLat, 0]\n            })\n            linedata.push({\n                \"sourcePosition\": [maxLon, minLat, 0],\n                \"targetPosition\": [minLon, minLat, 0]\n            })\n        })\n\n        setLinedata(linedata)\n    }\n\n    useEffect(() => {\n        socket.on(\"agents\", (data: any) => getAgents(data));\n        socket.on(\"areas\", (data: any) => getAreas(data));\n\n        //testAgent()\n\n        console.log(process.env);\n        if (actions) {\n            actions.setViewport({\n                ...props.viewport,\n                longitude: 136.9831702,\n                latitude: 35.1562909,\n                width: window.screen.width,\n                height: window.screen.height,\n                zoom: 16\n            })\n            actions.setSecPerHour(3600);\n            actions.setLeading(2)\n            actions.setTrailing(5)\n\n        }\n    }, [])\n\n\n    //console.log(\"render: \", viewport, actions)\n    return (\n        <div>\n            <Controller {...props} />\n            <HarmoVisLayers\n                viewport={viewport} actions={actions}\n                mapboxApiAccessToken={MAPBOX_TOKEN}\n                layers={[\n                    new LineMapLayer({\n                        data: linedata,\n                        getWidth: (x) => 10,\n                    }),\n                    new MovesLayer({\n                        routePaths,\n                        movesbase,\n                        movedData,\n                        clickedObject,\n                        actions,\n                        optionVisible: false,\n                        //lightSettings,\n                        //layerRadiusScale: 0.1,\n                        getRadius: x => 0.5,\n                        //getRouteWidth: x => 1,\n                        //optionCellSize: 2,\n                        //sizeScale: 1,\n                        iconChange: false,\n                        //optionChange: false, // this.state.optionChange,\n                        //onHover\n                    }),\n\n                ]}\n            />\n        </div>\n    );\n}\n\n\n\nasync function timeout(ms: number) {\n    await new Promise(resolve => setTimeout(resolve, ms));\n    return\n}\n\nconst getCoordRange = ((coords: Coord[]) => {\n    let maxLat = Number.NEGATIVE_INFINITY\n    let maxLon = Number.NEGATIVE_INFINITY\n    let minLat = Number.POSITIVE_INFINITY\n    let minLon = Number.POSITIVE_INFINITY\n\n    coords.forEach((coord) => {\n        if (coord.Lat > maxLat) {\n            maxLat = coord.Lat\n        }\n        if (coord.Lon > maxLon) {\n            maxLon = coord.Lon\n        }\n        if (coord.Lat < minLat) {\n            minLat = coord.Lat\n        }\n        if (coord.Lon < minLon) {\n            minLon = coord.Lon\n        }\n    })\n\n    return { maxLat, maxLon, minLat, minLon }\n})\n\nconst convertJsonToArea = ((data: any[]) => {\n    const areas: AreaInfo[] = []\n    data.forEach((areaStr: any) => {\n        const areaJson = JSON.parse(areaStr);\n        var area: AreaInfo = { ControlArea: [], DuplicateArea: [], Name: \"\", Id: \"\" }\n        areaJson.control_area.forEach((arg: any) => {\n            area.ControlArea.push({ Lat: arg.latitude, Lon: arg.longitude })\n        })\n        areaJson.duplicate_area.forEach((arg: any) => {\n            area.DuplicateArea.push({ Lat: arg.latitude, Lon: arg.longitude })\n        })\n        areaJson.id ? area.Id = areaJson.id : area.Id = \"\"\n        areaJson.name ? area.Name = areaJson.name : area.Name = \"\"\n        areas.push(area)\n    })\n\n    return areas\n})\n\nexport default connectToHarmowareVis(Harmoware);","import React from 'react';\nimport { Harmoware } from './views'\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { getCombinedReducer } from 'harmoware-vis';\nimport 'harmoware-vis/scss/harmoware.scss';\n\nconst store = createStore(getCombinedReducer());\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Harmoware />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}